C:\Users\Елизавета\.jdks\jbr-17.0.9\bin\java.exe "-javaagent:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2023.2.2\lib\idea_rt.jar=55982:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2023.2.2\bin" -Dfile.encoding=UTF-8 -classpath C:\Users\Елизавета\Downloads\optimization-hw\target\classes;C:\Users\Елизавета\.m2\repository\com\dyuproject\protostuff\protostuff-core\1.0.8\protostuff-core-1.0.8.jar;C:\Users\Елизавета\.m2\repository\com\dyuproject\protostuff\protostuff-api\1.0.8\protostuff-api-1.0.8.jar;C:\Users\Елизавета\.m2\repository\com\dyuproject\protostuff\protostuff-runtime\1.0.8\protostuff-runtime-1.0.8.jar;C:\Users\Елизавета\.m2\repository\com\dyuproject\protostuff\protostuff-collectionschema\1.0.8\protostuff-collectionschema-1.0.8.jar;C:\Users\Елизавета\.m2\repository\org\openjfx\javafx-controls\17.0.6\javafx-controls-17.0.6.jar;C:\Users\Елизавета\.m2\repository\org\openjfx\javafx-controls\17.0.6\javafx-controls-17.0.6-win.jar;C:\Users\Елизавета\.m2\repository\org\openjfx\javafx-graphics\17.0.6\javafx-graphics-17.0.6.jar;C:\Users\Елизавета\.m2\repository\org\openjfx\javafx-graphics\17.0.6\javafx-graphics-17.0.6-win.jar;C:\Users\Елизавета\.m2\repository\org\openjfx\javafx-base\17.0.6\javafx-base-17.0.6.jar;C:\Users\Елизавета\.m2\repository\org\openjfx\javafx-base\17.0.6\javafx-base-17.0.6-win.jar;C:\Users\Елизавета\.m2\repository\org\openjdk\jmh\jmh-core\1.33\jmh-core-1.33.jar;C:\Users\Елизавета\.m2\repository\net\sf\jopt-simple\jopt-simple\4.6\jopt-simple-4.6.jar;C:\Users\Елизавета\.m2\repository\org\apache\commons\commons-math3\3.2\commons-math3-3.2.jar;C:\Users\Елизавета\.m2\repository\org\openjdk\jmh\jmh-generator-annprocess\1.33\jmh-generator-annprocess-1.33.jar;C:\Users\Елизавета\.m2\repository\org\openjfx\javafx-fxml\17.0.6\javafx-fxml-17.0.6.jar;C:\Users\Елизавета\.m2\repository\org\openjfx\javafx-fxml\17.0.6\javafx-fxml-17.0.6-win.jar;C:\Users\Елизавета\.m2\repository\com\fasterxml\jackson\core\jackson-core\2.13.0\jackson-core-2.13.0.jar;C:\Users\Елизавета\.m2\repository\com\fasterxml\jackson\core\jackson-databind\2.13.4.2\jackson-databind-2.13.4.2.jar;C:\Users\Елизавета\.m2\repository\com\fasterxml\jackson\core\jackson-annotations\2.13.4\jackson-annotations-2.13.4.jar;C:\Users\Елизавета\.m2\repository\org\testng\testng\7.4.0\testng-7.4.0.jar;C:\Users\Елизавета\.m2\repository\com\beust\jcommander\1.78\jcommander-1.78.jar;C:\Users\Елизавета\.m2\repository\org\webjars\jquery\3.5.1\jquery-3.5.1.jar;C:\Users\Елизавета\.m2\repository\junit\junit\4.13.1\junit-4.13.1.jar;C:\Users\Елизавета\.m2\repository\org\hamcrest\hamcrest-core\1.3\hamcrest-core-1.3.jar com.example.optimizationhw.BenchmarkRunner
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8
# JMH version: 1.33
# VM version: JDK 17.0.9, OpenJDK 64-Bit Server VM, 17.0.9+7-b1087.3
# VM invoker: C:\Users\Елизавета\.jdks\jbr-17.0.9\bin\java.exe
# VM options: -Dfile.encoding=UTF8 -javaagent:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2023.2.2\lib\idea_rt.jar=55982:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2023.2.2\bin -Dfile.encoding=UTF-8
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.example.optimizationhw.BenchmarkRunner.benchmarkJSONDeserialize

# Run progress: 0,00% complete, ETA 00:40:00
# Warmup Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8
# Warmup Iteration   1: 2620846,923 ops/s
# Warmup Iteration   2: 2771150,718 ops/s
# Warmup Iteration   3: 2690379,339 ops/s
# Warmup Iteration   4: 2732939,120 ops/s
# Warmup Iteration   5: 2739654,561 ops/s
Iteration   1: 273312,488 ops/s
Iteration   2: 273252,898 ops/s
Iteration   3: 269903,291 ops/s
Iteration   4: 273276,385 ops/s
Iteration   5: 270453,543 ops/s

# Run progress: 4,17% complete, ETA 00:38:54
# Fork: 1 of 2
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8
# Warmup Iteration   1: 2580033,948 ops/s
# Warmup Iteration   2: 2661710,148 ops/s
# Warmup Iteration   3: 2721132,641 ops/s
# Warmup Iteration   4: 1068227,024 ops/s
# Warmup Iteration   5: 1335394,164 ops/s
Iteration   1: 273070,188 ops/s
Iteration   2: 273653,147 ops/s
Iteration   3: 274654,213 ops/s
Iteration   4: 274636,288 ops/s
Iteration   5: 271394,060 ops/s

# Run progress: 8,33% complete, ETA 00:37:11
# Fork: 2 of 2
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8
# Warmup Iteration   1: 2682337,827 ops/s
# Warmup Iteration   2: 2790231,986 ops/s
# Warmup Iteration   3: 2822896,987 ops/s
# Warmup Iteration   4: 2727719,748 ops/s
# Warmup Iteration   5: 2745256,326 ops/s
Iteration   1: 276687,434 ops/s
Iteration   2: 269140,551 ops/s
Iteration   3: 267573,448 ops/s
Iteration   4: 262207,766 ops/s
Iteration   5: 272382,137 ops/s


Result "com.example.optimizationhw.BenchmarkRunner.benchmarkJSONDeserialize":
  271539,923 ±(99.9%) 6412,292 ops/s [Average]
  (min, avg, max) = (262207,766, 271539,923, 276687,434), stdev = 4241,334
  CI (99.9%): [265127,631, 277952,215] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.9, OpenJDK 64-Bit Server VM, 17.0.9+7-b1087.3
# VM invoker: C:\Users\Елизавета\.jdks\jbr-17.0.9\bin\java.exe
# VM options: -Dfile.encoding=UTF8 -javaagent:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2023.2.2\lib\idea_rt.jar=55982:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2023.2.2\bin -Dfile.encoding=UTF-8
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.example.optimizationhw.BenchmarkRunner.benchmarkJSONSerialize

# Run progress: 12,50% complete, ETA 00:35:30
# Warmup Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8
# Warmup Iteration   1: 4138951,352 ops/s
# Warmup Iteration   2: 4516562,395 ops/s
# Warmup Iteration   3: 4255246,156 ops/s
# Warmup Iteration   4: 4515667,356 ops/s
# Warmup Iteration   5: 4651071,354 ops/s
Iteration   1: 457288,639 ops/s
Iteration   2: 463844,969 ops/s
Iteration   3: 453851,970 ops/s
Iteration   4: 397283,299 ops/s
Iteration   5: 431009,871 ops/s

# Run progress: 16,67% complete, ETA 00:33:48
# Fork: 1 of 2
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8
# Warmup Iteration   1: 4059359,520 ops/s
# Warmup Iteration   2: 4572333,728 ops/s
# Warmup Iteration   3: 4678505,617 ops/s
# Warmup Iteration   4: 4681384,143 ops/s
# Warmup Iteration   5: 4320841,357 ops/s
Iteration   1: 459815,283 ops/s
Iteration   2: 468394,055 ops/s
Iteration   3: 467203,862 ops/s
Iteration   4: 470484,926 ops/s
Iteration   5: 457102,920 ops/s

# Run progress: 20,83% complete, ETA 00:32:07
# Fork: 2 of 2
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8
# Warmup Iteration   1: 3915358,680 ops/s
# Warmup Iteration   2: 4610204,661 ops/s
# Warmup Iteration   3: 4611847,712 ops/s
# Warmup Iteration   4: 4544415,481 ops/s
# Warmup Iteration   5: 4641743,056 ops/s
Iteration   1: 462488,608 ops/s
Iteration   2: 418026,982 ops/s
Iteration   3: 455782,493 ops/s
Iteration   4: 462696,058 ops/s
Iteration   5: 459022,479 ops/s


Result "com.example.optimizationhw.BenchmarkRunner.benchmarkJSONSerialize":
  458101,767 ±(99.9%) 22529,677 ops/s [Average]
  (min, avg, max) = (418026,982, 458101,767, 470484,926), stdev = 14901,986
  CI (99.9%): [435572,090, 480631,444] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.9, OpenJDK 64-Bit Server VM, 17.0.9+7-b1087.3
# VM invoker: C:\Users\Елизавета\.jdks\jbr-17.0.9\bin\java.exe
# VM options: -Dfile.encoding=UTF8 -javaagent:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2023.2.2\lib\idea_rt.jar=55982:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2023.2.2\bin -Dfile.encoding=UTF-8
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.example.optimizationhw.BenchmarkRunner.benchmarkProtoDeserialize

# Run progress: 25,00% complete, ETA 00:30:26
# Warmup Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8
# Warmup Iteration   1: 2461606,080 ops/s
# Warmup Iteration   2: 2456950,343 ops/s
# Warmup Iteration   3: 2422992,400 ops/s
# Warmup Iteration   4: 2502685,374 ops/s
# Warmup Iteration   5: 2436748,341 ops/s
Iteration   1: 247091,533 ops/s
Iteration   2: 250802,838 ops/s
Iteration   3: 250126,406 ops/s
Iteration   4: 234677,260 ops/s
Iteration   5: 247731,009 ops/s

# Run progress: 29,17% complete, ETA 00:28:44
# Fork: 1 of 2
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8
# Warmup Iteration   1: 2336593,565 ops/s
# Warmup Iteration   2: 2393292,579 ops/s
# Warmup Iteration   3: 2383621,114 ops/s
# Warmup Iteration   4: 2389014,203 ops/s
# Warmup Iteration   5: 2257324,628 ops/s
Iteration   1: 236447,876 ops/s
Iteration   2: 237122,817 ops/s
Iteration   3: 239374,080 ops/s
Iteration   4: 238807,455 ops/s
Iteration   5: 237844,047 ops/s

# Run progress: 33,33% complete, ETA 00:27:03
# Fork: 2 of 2
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8
# Warmup Iteration   1: 2314139,559 ops/s
# Warmup Iteration   2: 2456419,767 ops/s
# Warmup Iteration   3: 2380183,085 ops/s
# Warmup Iteration   4: 2380946,194 ops/s
# Warmup Iteration   5: 2452271,085 ops/s
Iteration   1: 242597,472 ops/s
Iteration   2: 233027,528 ops/s
Iteration   3: 242782,891 ops/s
Iteration   4: 244090,258 ops/s
Iteration   5: 244312,735 ops/s


Result "com.example.optimizationhw.BenchmarkRunner.benchmarkProtoDeserialize":
  239640,716 ±(99.9%) 5623,161 ops/s [Average]
  (min, avg, max) = (233027,528, 239640,716, 244312,735), stdev = 3719,373
  CI (99.9%): [234017,555, 245263,876] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.9, OpenJDK 64-Bit Server VM, 17.0.9+7-b1087.3
# VM invoker: C:\Users\Елизавета\.jdks\jbr-17.0.9\bin\java.exe
# VM options: -Dfile.encoding=UTF8 -javaagent:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2023.2.2\lib\idea_rt.jar=55982:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2023.2.2\bin -Dfile.encoding=UTF-8
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.example.optimizationhw.BenchmarkRunner.benchmarkProtoSerialize

# Run progress: 37,50% complete, ETA 00:25:21
# Warmup Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8
# Warmup Iteration   1: 15551536,065 ops/s
# Warmup Iteration   2: 21917506,161 ops/s
# Warmup Iteration   3: 22480411,435 ops/s
# Warmup Iteration   4: 22425207,159 ops/s
# Warmup Iteration   5: 22260018,415 ops/s
Iteration   1: 2248523,836 ops/s
Iteration   2: 2181584,770 ops/s
Iteration   3: 2144038,886 ops/s
Iteration   4: 2173581,855 ops/s
Iteration   5: 2226674,056 ops/s

# Run progress: 41,67% complete, ETA 00:23:40
# Fork: 1 of 2
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8
# Warmup Iteration   1: 20246776,314 ops/s
# Warmup Iteration   2: 22483924,700 ops/s
# Warmup Iteration   3: 22349353,556 ops/s
# Warmup Iteration   4: 20857347,429 ops/s
# Warmup Iteration   5: 21982087,947 ops/s
Iteration   1: 2244470,049 ops/s
Iteration   2: 2223126,633 ops/s
Iteration   3: 2230807,201 ops/s
Iteration   4: 2206284,973 ops/s
Iteration   5: 2171885,991 ops/s

# Run progress: 45,83% complete, ETA 00:21:58
# Fork: 2 of 2
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8
# Warmup Iteration   1: 19411233,566 ops/s
# Warmup Iteration   2: 21601022,886 ops/s
# Warmup Iteration   3: 21745972,926 ops/s
# Warmup Iteration   4: 21635595,932 ops/s
# Warmup Iteration   5: 21475060,640 ops/s
Iteration   1: 1945635,358 ops/s
Iteration   2: 2150043,788 ops/s
Iteration   3: 2169880,818 ops/s
Iteration   4: 2169129,441 ops/s
Iteration   5: 2174835,618 ops/s


Result "com.example.optimizationhw.BenchmarkRunner.benchmarkProtoSerialize":
  2168609,987 ±(99.9%) 127618,903 ops/s [Average]
  (min, avg, max) = (1945635,358, 2168609,987, 2244470,049), stdev = 84412,003
  CI (99.9%): [2040991,084, 2296228,890] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.9, OpenJDK 64-Bit Server VM, 17.0.9+7-b1087.3
# VM invoker: C:\Users\Елизавета\.jdks\jbr-17.0.9\bin\java.exe
# VM options: -Dfile.encoding=UTF8 -javaagent:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2023.2.2\lib\idea_rt.jar=55982:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2023.2.2\bin -Dfile.encoding=UTF-8
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.example.optimizationhw.BenchmarkRunner.benchmarkJSONDeserialize

# Run progress: 50,00% complete, ETA 00:20:17
# Warmup Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8
# Warmup Iteration   1: ≈ 10⁻⁶ s/op
# Warmup Iteration   2: ≈ 10⁻⁶ s/op
# Warmup Iteration   3: ≈ 10⁻⁶ s/op
# Warmup Iteration   4: ≈ 10⁻⁶ s/op
# Warmup Iteration   5: ≈ 10⁻⁶ s/op
Iteration   1: ≈ 10⁻⁵ s/op
Iteration   2: ≈ 10⁻⁵ s/op
Iteration   3: ≈ 10⁻⁵ s/op
Iteration   4: ≈ 10⁻⁵ s/op
Iteration   5: ≈ 10⁻⁵ s/op

# Run progress: 54,17% complete, ETA 00:18:35
# Fork: 1 of 2
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8
# Warmup Iteration   1: ≈ 10⁻⁶ s/op
# Warmup Iteration   2: ≈ 10⁻⁶ s/op
# Warmup Iteration   3: ≈ 10⁻⁶ s/op
# Warmup Iteration   4: ≈ 10⁻⁶ s/op
# Warmup Iteration   5: ≈ 10⁻⁶ s/op
Iteration   1: ≈ 10⁻⁵ s/op
Iteration   2: ≈ 10⁻⁵ s/op
Iteration   3: ≈ 10⁻⁵ s/op
Iteration   4: ≈ 10⁻⁵ s/op
Iteration   5: ≈ 10⁻⁵ s/op

# Run progress: 58,33% complete, ETA 00:16:54
# Fork: 2 of 2
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8
# Warmup Iteration   1: ≈ 10⁻⁶ s/op
# Warmup Iteration   2: ≈ 10⁻⁶ s/op
# Warmup Iteration   3: ≈ 10⁻⁶ s/op
# Warmup Iteration   4: ≈ 10⁻⁶ s/op
# Warmup Iteration   5: ≈ 10⁻⁶ s/op
Iteration   1: ≈ 10⁻⁵ s/op
Iteration   2: ≈ 10⁻⁵ s/op
Iteration   3: ≈ 10⁻⁵ s/op
Iteration   4: ≈ 10⁻⁵ s/op
Iteration   5: ≈ 10⁻⁵ s/op


Result "com.example.optimizationhw.BenchmarkRunner.benchmarkJSONDeserialize":
  ≈ 10⁻⁵ s/op


# JMH version: 1.33
# VM version: JDK 17.0.9, OpenJDK 64-Bit Server VM, 17.0.9+7-b1087.3
# VM invoker: C:\Users\Елизавета\.jdks\jbr-17.0.9\bin\java.exe
# VM options: -Dfile.encoding=UTF8 -javaagent:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2023.2.2\lib\idea_rt.jar=55982:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2023.2.2\bin -Dfile.encoding=UTF-8
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.example.optimizationhw.BenchmarkRunner.benchmarkJSONSerialize

# Run progress: 62,50% complete, ETA 00:15:12
# Warmup Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8
# Warmup Iteration   1: ≈ 10⁻⁷ s/op
# Warmup Iteration   2: ≈ 10⁻⁷ s/op
# Warmup Iteration   3: ≈ 10⁻⁷ s/op
# Warmup Iteration   4: ≈ 10⁻⁷ s/op
# Warmup Iteration   5: ≈ 10⁻⁷ s/op
Iteration   1: ≈ 10⁻⁶ s/op
Iteration   2: ≈ 10⁻⁶ s/op
Iteration   3: ≈ 10⁻⁶ s/op
Iteration   4: ≈ 10⁻⁶ s/op
Iteration   5: ≈ 10⁻⁶ s/op

# Run progress: 66,67% complete, ETA 00:13:31
# Fork: 1 of 2
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8
# Warmup Iteration   1: ≈ 10⁻⁷ s/op
# Warmup Iteration   2: ≈ 10⁻⁷ s/op
# Warmup Iteration   3: ≈ 10⁻⁷ s/op
# Warmup Iteration   4: ≈ 10⁻⁷ s/op
# Warmup Iteration   5: ≈ 10⁻⁷ s/op
Iteration   1: ≈ 10⁻⁶ s/op
Iteration   2: ≈ 10⁻⁶ s/op
Iteration   3: ≈ 10⁻⁶ s/op
Iteration   4: ≈ 10⁻⁶ s/op
Iteration   5: ≈ 10⁻⁶ s/op

# Run progress: 70,83% complete, ETA 00:11:50
# Fork: 2 of 2
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8
# Warmup Iteration   1: ≈ 10⁻⁷ s/op
# Warmup Iteration   2: ≈ 10⁻⁷ s/op
# Warmup Iteration   3: ≈ 10⁻⁷ s/op
# Warmup Iteration   4: ≈ 10⁻⁷ s/op
# Warmup Iteration   5: ≈ 10⁻⁷ s/op
Iteration   1: ≈ 10⁻⁶ s/op
Iteration   2: ≈ 10⁻⁶ s/op
Iteration   3: ≈ 10⁻⁶ s/op
Iteration   4: ≈ 10⁻⁶ s/op
Iteration   5: ≈ 10⁻⁶ s/op


Result "com.example.optimizationhw.BenchmarkRunner.benchmarkJSONSerialize":
  ≈ 10⁻⁶ s/op


# JMH version: 1.33
# VM version: JDK 17.0.9, OpenJDK 64-Bit Server VM, 17.0.9+7-b1087.3
# VM invoker: C:\Users\Елизавета\.jdks\jbr-17.0.9\bin\java.exe
# VM options: -Dfile.encoding=UTF8 -javaagent:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2023.2.2\lib\idea_rt.jar=55982:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2023.2.2\bin -Dfile.encoding=UTF-8
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.example.optimizationhw.BenchmarkRunner.benchmarkProtoDeserialize

# Run progress: 75,00% complete, ETA 00:10:08
# Warmup Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8
# Warmup Iteration   1: ≈ 10⁻⁶ s/op
# Warmup Iteration   2: ≈ 10⁻⁶ s/op
# Warmup Iteration   3: ≈ 10⁻⁶ s/op
# Warmup Iteration   4: ≈ 10⁻⁶ s/op
# Warmup Iteration   5: ≈ 10⁻⁶ s/op
Iteration   1: ≈ 10⁻⁵ s/op
Iteration   2: ≈ 10⁻⁵ s/op
Iteration   3: ≈ 10⁻⁵ s/op
Iteration   4: ≈ 10⁻⁵ s/op
Iteration   5: ≈ 10⁻⁵ s/op

# Run progress: 79,17% complete, ETA 00:08:27
# Fork: 1 of 2
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8
# Warmup Iteration   1: ≈ 10⁻⁶ s/op
# Warmup Iteration   2: ≈ 10⁻⁶ s/op
# Warmup Iteration   3: ≈ 10⁻⁶ s/op
# Warmup Iteration   4: ≈ 10⁻⁶ s/op
# Warmup Iteration   5: ≈ 10⁻⁶ s/op
Iteration   1: ≈ 10⁻⁵ s/op
Iteration   2: ≈ 10⁻⁵ s/op
Iteration   3: ≈ 10⁻⁵ s/op
Iteration   4: ≈ 10⁻⁵ s/op
Iteration   5: ≈ 10⁻⁵ s/op

# Run progress: 83,33% complete, ETA 00:06:45
# Fork: 2 of 2
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8
# Warmup Iteration   1: ≈ 10⁻⁶ s/op
# Warmup Iteration   2: ≈ 10⁻⁶ s/op
# Warmup Iteration   3: ≈ 10⁻⁶ s/op
# Warmup Iteration   4: ≈ 10⁻⁶ s/op
# Warmup Iteration   5: ≈ 10⁻⁶ s/op
Iteration   1: ≈ 10⁻⁵ s/op
Iteration   2: ≈ 10⁻⁵ s/op
Iteration   3: ≈ 10⁻⁵ s/op
Iteration   4: ≈ 10⁻⁵ s/op
Iteration   5: ≈ 10⁻⁵ s/op


Result "com.example.optimizationhw.BenchmarkRunner.benchmarkProtoDeserialize":
  ≈ 10⁻⁵ s/op


# JMH version: 1.33
# VM version: JDK 17.0.9, OpenJDK 64-Bit Server VM, 17.0.9+7-b1087.3
# VM invoker: C:\Users\Елизавета\.jdks\jbr-17.0.9\bin\java.exe
# VM options: -Dfile.encoding=UTF8 -javaagent:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2023.2.2\lib\idea_rt.jar=55982:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2023.2.2\bin -Dfile.encoding=UTF-8
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each, 10 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.example.optimizationhw.BenchmarkRunner.benchmarkProtoSerialize

# Run progress: 87,50% complete, ETA 00:05:04
# Warmup Fork: 1 of 1
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8
# Warmup Iteration   1: ≈ 10⁻⁷ s/op
# Warmup Iteration   2: ≈ 10⁻⁷ s/op
# Warmup Iteration   3: ≈ 10⁻⁷ s/op
# Warmup Iteration   4: ≈ 10⁻⁷ s/op
# Warmup Iteration   5: ≈ 10⁻⁷ s/op
Iteration   1: ≈ 10⁻⁶ s/op
Iteration   2: ≈ 10⁻⁶ s/op
Iteration   3: ≈ 10⁻⁶ s/op
Iteration   4: ≈ 10⁻⁶ s/op
Iteration   5: ≈ 10⁻⁶ s/op

# Run progress: 91,67% complete, ETA 00:03:22
# Fork: 1 of 2
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8
# Warmup Iteration   1: ≈ 10⁻⁷ s/op
# Warmup Iteration   2: ≈ 10⁻⁷ s/op
# Warmup Iteration   3: ≈ 10⁻⁷ s/op
# Warmup Iteration   4: ≈ 10⁻⁷ s/op
# Warmup Iteration   5: ≈ 10⁻⁷ s/op
Iteration   1: ≈ 10⁻⁶ s/op
Iteration   2: ≈ 10⁻⁶ s/op
Iteration   3: ≈ 10⁻⁶ s/op
Iteration   4: ≈ 10⁻⁶ s/op
Iteration   5: ≈ 10⁻⁶ s/op

# Run progress: 95,83% complete, ETA 00:01:41
# Fork: 2 of 2
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8
# Warmup Iteration   1: ≈ 10⁻⁷ s/op
# Warmup Iteration   2: ≈ 10⁻⁷ s/op
# Warmup Iteration   3: ≈ 10⁻⁷ s/op
# Warmup Iteration   4: ≈ 10⁻⁷ s/op
# Warmup Iteration   5: ≈ 10⁻⁷ s/op
Iteration   1: ≈ 10⁻⁶ s/op
Iteration   2: ≈ 10⁻⁶ s/op
Iteration   3: ≈ 10⁻⁶ s/op
Iteration   4: ≈ 10⁻⁶ s/op
Iteration   5: ≈ 10⁻⁶ s/op


Result "com.example.optimizationhw.BenchmarkRunner.benchmarkProtoSerialize":
  ≈ 10⁻⁶ s/op


# Run complete. Total time: 00:40:35

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                   Mode  Cnt        Score        Error  Units
BenchmarkRunner.benchmarkJSONDeserialize   thrpt   10   271539,923 ±   6412,292  ops/s
BenchmarkRunner.benchmarkJSONSerialize     thrpt   10   458101,767 ±  22529,677  ops/s
BenchmarkRunner.benchmarkProtoDeserialize  thrpt   10   239640,716 ±   5623,161  ops/s
BenchmarkRunner.benchmarkProtoSerialize    thrpt   10  2168609,987 ± 127618,903  ops/s
BenchmarkRunner.benchmarkJSONDeserialize    avgt   10       ≈ 10⁻⁵                s/op
BenchmarkRunner.benchmarkJSONSerialize      avgt   10       ≈ 10⁻⁶                s/op
BenchmarkRunner.benchmarkProtoDeserialize   avgt   10       ≈ 10⁻⁵                s/op
BenchmarkRunner.benchmarkProtoSerialize     avgt   10       ≈ 10⁻⁶                s/op

Process finished with exit code 0
